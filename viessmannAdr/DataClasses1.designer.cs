#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace viessmannAdr
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ecnViessmann")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertecnDataPointTypeEventTypeLink(ecnDataPointTypeEventTypeLink instance);
    partial void UpdateecnDataPointTypeEventTypeLink(ecnDataPointTypeEventTypeLink instance);
    partial void DeleteecnDataPointTypeEventTypeLink(ecnDataPointTypeEventTypeLink instance);
    partial void InsertecnEventType(ecnEventType instance);
    partial void UpdateecnEventType(ecnEventType instance);
    partial void DeleteecnEventType(ecnEventType instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::viessmannAdr.Properties.Settings.Default.ecnViessmannConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ecnDataPointTypeEventTypeLink> ecnDataPointTypeEventTypeLink
		{
			get
			{
				return this.GetTable<ecnDataPointTypeEventTypeLink>();
			}
		}
		
		public System.Data.Linq.Table<ecnEventType> ecnEventType
		{
			get
			{
				return this.GetTable<ecnEventType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ecnDataPointTypeEventTypeLink")]
	public partial class ecnDataPointTypeEventTypeLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _CompanyId;
		
		private int _DataPointTypeId;
		
		private int _EventTypeId;
		
		private EntityRef<ecnEventType> _ecnEventType;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(byte value);
    partial void OnCompanyIdChanged();
    partial void OnDataPointTypeIdChanging(int value);
    partial void OnDataPointTypeIdChanged();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    #endregion
		
		public ecnDataPointTypeEventTypeLink()
		{
			this._ecnEventType = default(EntityRef<ecnEventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataPointTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataPointTypeId
		{
			get
			{
				return this._DataPointTypeId;
			}
			set
			{
				if ((this._DataPointTypeId != value))
				{
					this.OnDataPointTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DataPointTypeId = value;
					this.SendPropertyChanged("DataPointTypeId");
					this.OnDataPointTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._ecnEventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ecnEventType_ecnDataPointTypeEventTypeLink", Storage="_ecnEventType", ThisKey="EventTypeId", OtherKey="Id", IsForeignKey=true)]
		public ecnEventType ecnEventType
		{
			get
			{
				return this._ecnEventType.Entity;
			}
			set
			{
				ecnEventType previousValue = this._ecnEventType.Entity;
				if (((previousValue != value) 
							|| (this._ecnEventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ecnEventType.Entity = null;
						previousValue.ecnDataPointTypeEventTypeLink.Remove(this);
					}
					this._ecnEventType.Entity = value;
					if ((value != null))
					{
						value.ecnDataPointTypeEventTypeLink.Add(this);
						this._EventTypeId = value.Id;
					}
					else
					{
						this._EventTypeId = default(int);
					}
					this.SendPropertyChanged("ecnEventType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ecnEventType")]
	public partial class ecnEventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private byte _CompanyId;
		
		private bool _EnumType;
		
		private string _Name;
		
		private string _Address;
		
		private string _Conversion;
		
		private string _Description;
		
		private int _Priority;
		
		private bool _Filtercriterion;
		
		private bool _Reportingcriterion;
		
		private int _Type;
		
		private string _URL;
		
		private string _DefaultValue;
		
		private int _ObjectId;
		
		private EntitySet<ecnDataPointTypeEventTypeLink> _ecnDataPointTypeEventTypeLink;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(byte value);
    partial void OnCompanyIdChanged();
    partial void OnEnumTypeChanging(bool value);
    partial void OnEnumTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnConversionChanging(string value);
    partial void OnConversionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnFiltercriterionChanging(bool value);
    partial void OnFiltercriterionChanged();
    partial void OnReportingcriterionChanging(bool value);
    partial void OnReportingcriterionChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnObjectIdChanging(int value);
    partial void OnObjectIdChanged();
    #endregion
		
		public ecnEventType()
		{
			this._ecnDataPointTypeEventTypeLink = new EntitySet<ecnDataPointTypeEventTypeLink>(new Action<ecnDataPointTypeEventTypeLink>(this.attach_ecnDataPointTypeEventTypeLink), new Action<ecnDataPointTypeEventTypeLink>(this.detach_ecnDataPointTypeEventTypeLink));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnumType", DbType="Bit NOT NULL")]
		public bool EnumType
		{
			get
			{
				return this._EnumType;
			}
			set
			{
				if ((this._EnumType != value))
				{
					this.OnEnumTypeChanging(value);
					this.SendPropertyChanging();
					this._EnumType = value;
					this.SendPropertyChanged("EnumType");
					this.OnEnumTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conversion", DbType="VarChar(255)")]
		public string Conversion
		{
			get
			{
				return this._Conversion;
			}
			set
			{
				if ((this._Conversion != value))
				{
					this.OnConversionChanging(value);
					this.SendPropertyChanging();
					this._Conversion = value;
					this.SendPropertyChanged("Conversion");
					this.OnConversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filtercriterion", DbType="Bit NOT NULL")]
		public bool Filtercriterion
		{
			get
			{
				return this._Filtercriterion;
			}
			set
			{
				if ((this._Filtercriterion != value))
				{
					this.OnFiltercriterionChanging(value);
					this.SendPropertyChanging();
					this._Filtercriterion = value;
					this.SendPropertyChanged("Filtercriterion");
					this.OnFiltercriterionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reportingcriterion", DbType="Bit NOT NULL")]
		public bool Reportingcriterion
		{
			get
			{
				return this._Reportingcriterion;
			}
			set
			{
				if ((this._Reportingcriterion != value))
				{
					this.OnReportingcriterionChanging(value);
					this.SendPropertyChanging();
					this._Reportingcriterion = value;
					this.SendPropertyChanged("Reportingcriterion");
					this.OnReportingcriterionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(255)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(1024)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="Int NOT NULL")]
		public int ObjectId
		{
			get
			{
				return this._ObjectId;
			}
			set
			{
				if ((this._ObjectId != value))
				{
					this.OnObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectId = value;
					this.SendPropertyChanged("ObjectId");
					this.OnObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ecnEventType_ecnDataPointTypeEventTypeLink", Storage="_ecnDataPointTypeEventTypeLink", ThisKey="Id", OtherKey="EventTypeId")]
		public EntitySet<ecnDataPointTypeEventTypeLink> ecnDataPointTypeEventTypeLink
		{
			get
			{
				return this._ecnDataPointTypeEventTypeLink;
			}
			set
			{
				this._ecnDataPointTypeEventTypeLink.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ecnDataPointTypeEventTypeLink(ecnDataPointTypeEventTypeLink entity)
		{
			this.SendPropertyChanging();
			entity.ecnEventType = this;
		}
		
		private void detach_ecnDataPointTypeEventTypeLink(ecnDataPointTypeEventTypeLink entity)
		{
			this.SendPropertyChanging();
			entity.ecnEventType = null;
		}
	}
}
#pragma warning restore 1591
